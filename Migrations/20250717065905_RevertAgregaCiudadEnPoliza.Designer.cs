// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Seguroquesi.Data;

#nullable disable

namespace Seguroquesi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250717065905_RevertAgregaCiudadEnPoliza")]
    partial class RevertAgregaCiudadEnPoliza
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Seguroquesi.Models.Aseguradora", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Documento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Pais")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Aseguradoras");
                });

            modelBuilder.Entity("Seguroquesi.Models.CoberturaAdicional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostoAdicional")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductoSeguroId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoSeguroId");

                    b.ToTable("CoberturasAdicionales");
                });

            modelBuilder.Entity("Seguroquesi.Models.CoberturaAdicionalCoche", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductoSeguroId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoCobertura")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductoSeguroId");

                    b.ToTable("CoberturasAdicionalesCoche");
                });

            modelBuilder.Entity("Seguroquesi.Models.CondicionesPoliza", b =>
                {
                    b.Property<Guid>("PolizaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancelacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Derechos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Especiales")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Exclusiones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Generales")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Indemnizacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Modificacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Obligaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Particulares")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reclamaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Renovacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Suspensiones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PolizaId");

                    b.ToTable("CondicionesPolizas");
                });

            modelBuilder.Entity("Seguroquesi.Models.Cotizacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApellidoTomador")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MontoEstimado")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreTomador")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroCotizacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductoSeguroId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoDocumentoPersona")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TomadorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoSeguroId");

                    b.HasIndex("TomadorId");

                    b.ToTable("Cotizaciones");
                });

            modelBuilder.Entity("Seguroquesi.Models.DocumentoAdjunto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Contenido")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PolizaId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SiniestroId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoContenido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TomadorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PolizaId");

                    b.HasIndex("SiniestroId");

                    b.HasIndex("TomadorId");

                    b.ToTable("DocumentosAdjuntos");
                });

            modelBuilder.Entity("Seguroquesi.Models.Nacionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Nacionalidades");
                });

            modelBuilder.Entity("Seguroquesi.Models.Poliza", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApellidoTomador")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Ciudad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cobertura")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CotizacionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EstadoPoliza")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Genero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Moneda")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombreTomador")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroPoliza")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Pais")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Prima")
                        .HasColumnType("TEXT");

                    b.Property<int>("Provincia")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoDocumentoPersona")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TomadorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CotizacionId")
                        .IsUnique();

                    b.HasIndex("TomadorId");

                    b.ToTable("Polizas");
                });

            modelBuilder.Entity("Seguroquesi.Models.ProductoSeguro", b =>
                {
                    b.Property<Guid>("ProductoSeguroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AseguradoraId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoberturaCoche")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrimaBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RamoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductoSeguroId");

                    b.HasIndex("AseguradoraId");

                    b.ToTable("ProductosSeguros");
                });

            modelBuilder.Entity("Seguroquesi.Models.Siniestro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaSiniestro")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PolizaId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TomadorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PolizaId");

                    b.HasIndex("TomadorId");

                    b.ToTable("Siniestros");
                });

            modelBuilder.Entity("Seguroquesi.Models.Tomador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Ciudad")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CiudadEspana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("Documento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Genero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Nacionalidad")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Pais")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Provincia")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProvinciaEspana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rol")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SegundoNombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tomadores");

                    b.HasDiscriminator().HasValue("Tomador");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Seguroquesi.Models.Cliente", b =>
                {
                    b.HasBaseType("Seguroquesi.Models.Tomador");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("Seguroquesi.Models.CoberturaAdicional", b =>
                {
                    b.HasOne("Seguroquesi.Models.ProductoSeguro", "ProductoSeguro")
                        .WithMany()
                        .HasForeignKey("ProductoSeguroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductoSeguro");
                });

            modelBuilder.Entity("Seguroquesi.Models.CoberturaAdicionalCoche", b =>
                {
                    b.HasOne("Seguroquesi.Models.ProductoSeguro", "ProductoSeguro")
                        .WithMany("CoberturasAdicionalesCoche")
                        .HasForeignKey("ProductoSeguroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductoSeguro");
                });

            modelBuilder.Entity("Seguroquesi.Models.CondicionesPoliza", b =>
                {
                    b.HasOne("Seguroquesi.Models.Poliza", "Poliza")
                        .WithOne("CondicionesPoliza")
                        .HasForeignKey("Seguroquesi.Models.CondicionesPoliza", "PolizaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poliza");
                });

            modelBuilder.Entity("Seguroquesi.Models.Cotizacion", b =>
                {
                    b.HasOne("Seguroquesi.Models.ProductoSeguro", "ProductoSeguro")
                        .WithMany()
                        .HasForeignKey("ProductoSeguroId");

                    b.HasOne("Seguroquesi.Models.Tomador", null)
                        .WithMany("Cotizaciones")
                        .HasForeignKey("TomadorId");

                    b.Navigation("ProductoSeguro");
                });

            modelBuilder.Entity("Seguroquesi.Models.DocumentoAdjunto", b =>
                {
                    b.HasOne("Seguroquesi.Models.Poliza", "Poliza")
                        .WithMany("DocumentosAdjuntos")
                        .HasForeignKey("PolizaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seguroquesi.Models.Siniestro", "Siniestro")
                        .WithMany()
                        .HasForeignKey("SiniestroId");

                    b.HasOne("Seguroquesi.Models.Tomador", null)
                        .WithMany("DocumentosAdjuntos")
                        .HasForeignKey("TomadorId");

                    b.Navigation("Poliza");

                    b.Navigation("Siniestro");
                });

            modelBuilder.Entity("Seguroquesi.Models.Poliza", b =>
                {
                    b.HasOne("Seguroquesi.Models.Cotizacion", "Cotizacion")
                        .WithOne("Poliza")
                        .HasForeignKey("Seguroquesi.Models.Poliza", "CotizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seguroquesi.Models.Tomador", null)
                        .WithMany("Polizas")
                        .HasForeignKey("TomadorId");

                    b.Navigation("Cotizacion");
                });

            modelBuilder.Entity("Seguroquesi.Models.ProductoSeguro", b =>
                {
                    b.HasOne("Seguroquesi.Models.Aseguradora", "Aseguradora")
                        .WithMany("Productos")
                        .HasForeignKey("AseguradoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aseguradora");
                });

            modelBuilder.Entity("Seguroquesi.Models.Siniestro", b =>
                {
                    b.HasOne("Seguroquesi.Models.Poliza", "Poliza")
                        .WithMany("Siniestros")
                        .HasForeignKey("PolizaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seguroquesi.Models.Tomador", null)
                        .WithMany("Siniestros")
                        .HasForeignKey("TomadorId");

                    b.Navigation("Poliza");
                });

            modelBuilder.Entity("Seguroquesi.Models.Aseguradora", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Seguroquesi.Models.Cotizacion", b =>
                {
                    b.Navigation("Poliza");
                });

            modelBuilder.Entity("Seguroquesi.Models.Poliza", b =>
                {
                    b.Navigation("CondicionesPoliza");

                    b.Navigation("DocumentosAdjuntos");

                    b.Navigation("Siniestros");
                });

            modelBuilder.Entity("Seguroquesi.Models.ProductoSeguro", b =>
                {
                    b.Navigation("CoberturasAdicionalesCoche");
                });

            modelBuilder.Entity("Seguroquesi.Models.Tomador", b =>
                {
                    b.Navigation("Cotizaciones");

                    b.Navigation("DocumentosAdjuntos");

                    b.Navigation("Polizas");

                    b.Navigation("Siniestros");
                });
#pragma warning restore 612, 618
        }
    }
}
